name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-security-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install cargo-audit
        run: cargo install cargo-audit --force
        
      - name: Run security audit
        run: cargo audit --json > audit-results.json
        continue-on-error: true
        
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          
      - name: Fail on high/critical vulnerabilities
        run: |
          if cargo audit --deny warnings --deny unmaintained --deny unsound --deny yanked; then
            echo "✅ No high-risk vulnerabilities found"
          else
            echo "❌ High-risk vulnerabilities detected"
            exit 1
          fi

  cargo-deny:
    name: Cargo Deny Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install cargo-deny
        run: cargo install cargo-deny --force
        
      - name: Run cargo-deny
        run: cargo deny check

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  vulnerability-scanning:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          cat > Dockerfile.security-scan << 'EOF'
          FROM rust:1.70-slim
          WORKDIR /app
          COPY . .
          RUN cargo build --release
          EOF
          docker build -f Dockerfile.security-scan -t bitcoin-enterprise-suite:latest .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bitcoin-enterprise-suite:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install cargo-license
        run: cargo install cargo-license --force
        
      - name: Check licenses
        run: |
          cargo license --json > licenses.json
          # Check for GPL, AGPL, or other copyleft licenses
          if grep -E "(GPL|AGPL|LGPL)" licenses.json; then
            echo "❌ Copyleft licenses detected - please review"
            exit 1
          else
            echo "✅ License compliance check passed"
          fi
          
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Verify Cargo.lock is up to date
        run: |
          cargo check --locked || (echo "❌ Cargo.lock is not up to date" && exit 1)
          echo "✅ Cargo.lock verification passed"
          
      - name: Check for suspicious dependencies
        run: |
          # Check for dependencies with suspicious patterns
          if grep -E "(bitcoin.*hack|crypto.*steal|wallet.*drain)" Cargo.lock; then
            echo "❌ Suspicious dependency names detected"
            exit 1
          else
            echo "✅ Dependency name check passed"
          fi

  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: rust
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build for CodeQL
        run: cargo build --workspace
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:rust"

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check SECURITY.md exists
        run: |
          if [ ! -f "SECURITY.md" ]; then
            echo "❌ SECURITY.md file missing"
            exit 1
          fi
          echo "✅ SECURITY.md file found"
          
      - name: Validate security documentation
        run: |
          # Check that required security files exist
          required_files=(
            "docs/security/SECURITY.md"
            "docs/security/audit-reports.md"
            ".github/dependabot.yml"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required security file missing: $file"
              exit 1
            fi
          done
          
          echo "✅ All required security files present"

  reproducible-builds:
    name: Reproducible Build Verification
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: First build
        run: |
          cargo build --release
          find target/release -name "*.rlib" -o -name "*.so" -o -name "*.dylib" | \
          xargs sha256sum > checksums1.txt
          
      - name: Clean and second build
        run: |
          cargo clean
          cargo build --release
          find target/release -name "*.rlib" -o -name "*.so" -o -name "*.dylib" | \
          xargs sha256sum > checksums2.txt
          
      - name: Compare builds
        run: |
          if diff checksums1.txt checksums2.txt; then
            echo "✅ Builds are reproducible"
          else
            echo "❌ Builds are not reproducible - potential supply chain issue"
            exit 1
          fi

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, cargo-deny, secret-scanning, license-check, supply-chain-security, security-policy-check]
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-results'
          merge-multiple: true
        continue-on-error: true
        
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Check Summary" > security-report.md
          echo "Generated: $(date -u)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Job Results" >> security-report.md
          echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> security-report.md
          echo "- Cargo Deny: ${{ needs.cargo-deny.result }}" >> security-report.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-report.md
          echo "- License Check: ${{ needs.license-check.result }}" >> security-report.md
          echo "- Supply Chain: ${{ needs.supply-chain-security.result }}" >> security-report.md
          echo "- Policy Check: ${{ needs.security-policy-check.result }}" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md