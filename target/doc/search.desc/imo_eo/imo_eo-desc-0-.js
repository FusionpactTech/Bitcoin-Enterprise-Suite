searchState.loadedDescShard("imo_eo", 0, "IMO-EO - Intelligent Mining Operations &amp; Energy …\nA Bitcoin address.\nMainnet Bitcoin.\nA bitcoin block hash.\nMaximum transaction weight for Bitcoin Core 25.0.\nThe cryptocurrency network to act on.\nBitcoin’s regtest network.\nBitcoin’s signet network.\nBitcoin’s testnet network.\nBitcoin transaction.\nLibrary version\nGets the address type of the address.\nAnalytics for IMO-EO\nReturns a reference to the inner hash (sha256, sh256d …\nReturns a reference to the unchecked address, which is …\nMarks, without any additional checks, network of this …\nReturns a reference to the checked address. This function …\nReturns the base transaction size.\nCarbon tracking for IMO-EO\nReturn the network’s chain hash (genesis block hash).\nEnergy management for IMO-EO\nError types for IMO-EO\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Network</code> from the chain hash (genesis block hash).\nConverts a <code>bitcoind -chain</code> argument name to its equivalent …\nCreates a <code>Network</code> from the magic bytes.\nCreates this wrapper type from the inner hash type.\nConstructs an <code>Address</code> from an output script (<code>scriptPubkey</code>).\nHardware management for IMO-EO\nInitialize IMO-EO with default configuration\nList of transaction inputs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts and returns the network and payload components of …\nReturns true if this <code>Transaction</code>’s absolute timelock is …\nChecks if this is a coinbase transaction.\nChecks if this is a coinbase transaction.\nReturns <code>true</code> if the transaction itself opted in to be …\nReturns <code>true</code> if this transactions nLockTime is enabled (…\nReturns true if the given pubkey is directly related to …\nReturns true if the supplied xonly public key can be used …\nChecks whether or not the address is following Bitcoin …\nParsed addresses do not always have <em>one</em> network. The …\nBlock height or timestamp. Transaction cannot be included …\nReturn the network magic bytes, which should be encoded …\nReturns true if the address creates a particular script …\nMining operations for IMO-EO\nReturns a reference to the network of this address.\nCreate new address from given components, infering the …\nComputes a “normalized TXID” which does not include …\nOptimization algorithms for IMO-EO\nList of transaction outputs.\nCreates a pay to (compressed) public key hash address from …\nCreates a pay to script hash P2SH address from a script.\nCreates a pay to script address that embeds a witness pay …\nCreates a pay to script address that embeds a witness pay …\nCreates a pay to taproot address from an untweaked key.\nCreates a pay to taproot address from a pre-tweaked output …\nCreates a witness pay to public key address from a public …\nCreates a witness pay to script hash address.\nReturns a reference to the payload of this address.\nCommon imports and types for IMO-EO users\nChecks whether network of this address is as required.\nGenerates a script pubkey spending to this address.\nReturns an iterator over lengths of <code>script_pubkey</code>s in the …\nReturns the size of this transaction excluding the witness …\nConverts a <code>Network</code> to its equivalent <code>bitcoind -chain</code> …\nCreates a URI string <em>bitcoin:address</em> optimized to be …\nReturns the inner hash (sha256, sh256d etc.).\nCounts the total number of sigops.\nReturns the total transaction size.\nComputes the <code>Txid</code>.\nThe protocol version, is currently expected to be 1 or 2 …\nReturns the “virtual size” (vsize) of this transaction.\nReturns the weight of this transaction, as defined by …\nComputes the segwit version of the transaction id.\nPerformance analytics for mining operations\nAnalyze performance\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new analytics engine\nEnvironmental impact and carbon footprint tracking\nEmissions calculator\nOffset manager\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new carbon tracker\nTrack carbon emissions\nEfficiency tracker\nReal-time energy consumption monitoring system\nPower manager\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMonitor energy consumption\nCreate a new energy monitor\nAnalytics errors\nBitcoin library errors\nCarbon tracking errors\nConfiguration errors\nEnergy monitoring errors\nContains the error value\nMain error type for IMO-EO operations\nGeneric errors\nHardware management errors\nHTTP errors\nMining optimization errors\nContains the success value\nPool management errors\nResult type alias for IMO-EO operations\nCreate a new energy monitoring error\nReturns the argument unchanged.\nCreate a new generic error\nCalls <code>U::from(self)</code>.\nCreate a new mining optimization error\nComprehensive mining hardware management system\nHealth monitor\nMaintenance scheduler\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nManage hardware\nCreate a new hardware manager\nAI-driven mining operation optimization system\nBuilder for mining optimizer\nMining strategy\nPool manager\nBuild the optimizer\nCreate a new mining optimizer builder\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mining optimizer\nOptimize mining operations\nSet power cost\nSet target efficiency\nOptimization strategy\nAdvanced optimization engine for mining operations\nOptimization recommendations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new optimizer\nRun optimization")