searchState.loadedDescShard("cci_sat", 0, "CCI-SAT - Cross-Chain Interoperability &amp; Secure Asset …\nA Bitcoin address.\nMainnet Bitcoin.\nMaximum transaction weight for Bitcoin Core 25.0.\nThis is used as a “null txout” in consensus signing …\nThe cryptocurrency network to act on.\nBitcoin’s regtest network.\nBitcoin’s signet network.\nBitcoin’s testnet network.\nBitcoin transaction.\nBitcoin transaction output.\nLibrary version\nGets the address type of the address.\nReturns a reference to the unchecked address, which is …\nMarks, without any additional checks, network of this …\nReturns a reference to the checked address. This function …\nAtomic swap implementation for CCI-SAT\nReturns the base transaction size.\nBridge protocols for CCI-SAT\nReturn the network’s chain hash (genesis block hash).\nError types for CCI-SAT\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Network</code> from the chain hash (genesis block hash).\nConverts a <code>bitcoind -chain</code> argument name to its equivalent …\nCreates a <code>Network</code> from the magic bytes.\nConstructs an <code>Address</code> from an output script (<code>scriptPubkey</code>).\nInitialize CCI-SAT with default configuration\nList of transaction inputs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts and returns the network and payload components of …\nReturns true if this <code>Transaction</code>’s absolute timelock is …\nChecks if this is a coinbase transaction.\nChecks if this is a coinbase transaction.\nReturns <code>true</code> if the transaction itself opted in to be …\nReturns <code>true</code> if this transactions nLockTime is enabled (…\nReturns true if the given pubkey is directly related to …\nReturns true if the supplied xonly public key can be used …\nChecks whether or not the address is following Bitcoin …\nParsed addresses do not always have <em>one</em> network. The …\nLightning Network integration for CCI-SAT\nBlock height or timestamp. Transaction cannot be included …\nReturn the network magic bytes, which should be encoded …\nReturns true if the address creates a particular script …\nCreates a <code>TxOut</code> with given script and the smallest …\nCross-chain monitoring for CCI-SAT\nReturns a reference to the network of this address.\nCreate new address from given components, infering the …\nComputes a “normalized TXID” which does not include …\nList of transaction outputs.\nCreates a pay to (compressed) public key hash address from …\nCreates a pay to script hash P2SH address from a script.\nCreates a pay to script address that embeds a witness pay …\nCreates a pay to script address that embeds a witness pay …\nCreates a pay to taproot address from an untweaked key.\nCreates a pay to taproot address from a pre-tweaked output …\nCreates a witness pay to public key address from a public …\nCreates a witness pay to script hash address.\nReturns a reference to the payload of this address.\nCommon imports and types for CCI-SAT users\nCross-chain protocols for CCI-SAT\nChecks whether network of this address is as required.\nGenerates a script pubkey spending to this address.\nThe script which must be satisfied for the output to be …\nReturns an iterator over lengths of <code>script_pubkey</code>s in the …\nReturns the total number of bytes that this output …\nReturns the size of this transaction excluding the witness …\nConverts a <code>Network</code> to its equivalent <code>bitcoind -chain</code> …\nCreates a URI string <em>bitcoin:address</em> optimized to be …\nCounts the total number of sigops.\nReturns the total transaction size.\nComputes the <code>Txid</code>.\nThe value of the output, in satoshis.\nThe protocol version, is currently expected to be 1 or 2 …\nReturns the “virtual size” (vsize) of this transaction.\nMulti-chain wallet for CCI-SAT\nThe weight of this output.\nReturns the weight of this transaction, as defined by …\nComputes the segwit version of the transaction id.\nAtomic swap implementation for cross-chain transactions\nBuilder for atomic swaps\nSwap execution context\nBuild the swap\nCreate a new swap builder\nComplete atomic swap\nExecute the swap\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet Bitcoin source\nInitiate atomic swap\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new atomic swap\nSet Ethereum destination\nSet timeout\nCross-chain bridge implementation\nBridge protocol definition\nFraud proof mechanism\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new bridge\nTransfer assets across chains\nAtomic swap errors\nBitcoin library errors\nBridge protocol errors\nContains the error value\nMain error type for CCI-SAT operations\nGeneric errors\nHTTP errors\nLightning Network errors\nNetwork communication errors\nContains the success value\nCross-chain protocol errors\nResult type alias for CCI-SAT operations\nMulti-chain wallet errors\nCreate a new atomic swap error\nReturns the argument unchanged.\nCreate a new generic error\nCalls <code>U::from(self)</code>.\nCreate a new lightning error\nBuilder for Lightning channels\nLightning Network channel\nBuild the channel\nCreate a new channel builder\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMonitoring system for CCI-SAT operations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new monitor\nStart monitoring\nProtocol definitions for CCI-SAT\nExecute protocol\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new protocol\nMulti-chain wallet\nWallet builder\nBuild the wallet\nCreate a new wallet builder\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")