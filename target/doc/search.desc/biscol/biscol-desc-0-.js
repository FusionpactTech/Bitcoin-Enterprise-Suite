searchState.loadedDescShard("biscol", 0, "BiSCOL - Bitcoin-Native Smart Contract Orchestration Layer\nA Bitcoin address.\nMainnet Bitcoin.\nMaximum transaction weight for Bitcoin Core 25.0.\nThis is used as a “null txout” in consensus signing …\nThe cryptocurrency network to act on.\nPublic key - used to verify ECDSA signatures and to do …\nBitcoin’s regtest network.\nSecret key - a 256-bit key used to create ECDSA and …\nAn ECDSA signature\nBitcoin’s signet network.\nBitcoin’s testnet network.\nBitcoin transaction.\nBitcoin transaction output.\nLibrary version\nTweaks a <code>PublicKey</code> by adding <code>tweak * G</code> modulo the curve …\nTweaks a <code>SecretKey</code> by adding <code>tweak</code> modulo the curve order.\nGets the address type of the address.\nObtains a const pointer suitable for use with FFI …\nObtains a mutable pointer suitable for use with FFI …\nObtains a raw mutable pointer suitable for use with FFI …\nObtains a raw mutable pointer suitable for use with FFI …\nObtains a raw const pointer suitable for use with FFI …\nObtains a raw pointer suitable for use with FFI functions\nGets a reference to the underlying array.\nReturns a reference to the unchecked address, which is …\nMarks, without any additional checks, network of this …\nReturns a reference to the checked address. This function …\nReturns the base transaction size.\nReturn the network’s chain hash (genesis block hash).\nLike <code>cmp::Cmp</code> but faster and with no guarantees across …\nLike <code>cmp::Cmp</code> but faster and with no guarantees across …\nAdds a second key to this one, returning the sum.\nAdds the keys in the provided slice together, returning …\nCompliance features for BiSCOL\nSmart contract orchestration for BiSCOL\nFormats the explicit byte value of the secret key kept …\nThis implementation is designed to be constant time to …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nLike <code>cmp::Eq</code> but faster and with no guarantees across …\nError types for BiSCOL\nConverts a 32-byte hash directly to a secret key without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Network</code> from the chain hash (genesis block hash).\nConverts a 64-byte compact-encoded byte slice to a …\nConverts a <code>bitcoind -chain</code> argument name to its equivalent …\nConverts a DER-encoded byte slice to a signature\nConverts a “lax DER”-encoded byte slice to a …\nCreates a new public key from an <code>ElligatorSwift</code>.\nConstructs a <code>SecretKey</code> by hashing <code>data</code> with hash algorithm …\nCreates a new secret key using data from BIP-340 <code>Keypair</code>.\nCreates a new compressed public key using data from …\nCreates a <code>Network</code> from the magic bytes.\nConstructs an <code>Address</code> from an output script (<code>scriptPubkey</code>).\nCreates a new public key from a <code>SecretKey</code>.\nCreates a new public key from a <code>SecretKey</code> and the global …\nConverts a <code>SECRET_KEY_SIZE</code>-byte slice to a secret key.\nCreates a public key directly from a slice.\nCreates a <code>PublicKey</code> using the key material from <code>pk</code> …\nInitialize BiSCOL with default configuration\nList of transaction inputs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts and returns the network and payload components of …\nReturns true if this <code>Transaction</code>’s absolute timelock is …\nChecks if this is a coinbase transaction.\nChecks if this is a coinbase transaction.\nReturns <code>true</code> if the transaction itself opted in to be …\nReturns <code>true</code> if this transactions nLockTime is enabled (…\nReturns true if the given pubkey is directly related to …\nReturns true if the supplied xonly public key can be used …\nChecks whether or not the address is following Bitcoin …\nParsed addresses do not always have <em>one</em> network. The …\nReturns the <code>Keypair</code> for this <code>SecretKey</code>.\nBlock height or timestamp. Transaction cannot be included …\nReturn the network magic bytes, which should be encoded …\nReturns true if the address creates a particular script …\nCreates a <code>TxOut</code> with given script and the smallest …\nTweaks a <code>SecretKey</code> by multiplying by <code>tweak</code> modulo the …\nTweaks a <code>PublicKey</code> by multiplying by <code>tweak</code> modulo the …\nMulti-signature support for BiSCOL\nNegates the secret key.\nNegates the public key.\nReturns a reference to the network of this address.\nCreate new address from given components, infering the …\nAttempts to erase the contents of the underlying array.\nNormalizes a signature to a “low S” form. In ECDSA, …\nComputes a “normalized TXID” which does not include …\nList of transaction outputs.\nCreates a pay to (compressed) public key hash address from …\nCreates a pay to script hash P2SH address from a script.\nCreates a pay to script address that embeds a witness pay …\nCreates a pay to script address that embeds a witness pay …\nCreates a pay to taproot address from an untweaked key.\nCreates a pay to taproot address from a pre-tweaked output …\nCreates a witness pay to public key address from a public …\nCreates a witness pay to script hash address.\nReturns a reference to the payload of this address.\nCommon imports and types for BiSCOL users\nReturns the <code>PublicKey</code> for this <code>SecretKey</code>.\nChecks whether network of this address is as required.\nBitcoin script execution and management for BiSCOL\nGenerates a script pubkey spending to this address.\nThe script which must be satisfied for the output to be …\nReturns an iterator over lengths of <code>script_pubkey</code>s in the …\nReturns the secret key as a byte value.\nSerializes the key as a byte-encoded pair of values. In …\nSerializes the signature in compact format\nSerializes the signature in DER format\nSerializes the key as a byte-encoded pair of values, in …\nConstructs an ECDSA signature for <code>msg</code> using the global …\nReturns the total number of bytes that this output …\nReturns the size of this transaction excluding the witness …\nTaproot implementation for BiSCOL\nConverts a <code>Network</code> to its equivalent <code>bitcoind -chain</code> …\nCreates a URI string <em>bitcoin:address</em> optimized to be …\nCounts the total number of sigops.\nReturns the total transaction size.\nComputes the <code>Txid</code>.\nThe value of the output, in satoshis.\nChecks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …\nVerifies an ECDSA signature for <code>msg</code> using <code>pk</code> and the …\nThe protocol version, is currently expected to be 1 or 2 …\nReturns the “virtual size” (vsize) of this transaction.\nThe weight of this output.\nReturns the weight of this transaction, as defined by …\nComputes the segwit version of the transaction id.\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …\nZero-knowledge proof support for BiSCOL\nCompliance checking for BiSCOL contracts\nCheck contract compliance\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new compliance checker\nBuilder for creating smart contracts\nContract execution environment\nBitcoin smart contract representation\nBuild the contract\nDeploy the contract\nExecute contract function\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new smart contract\nSet multi-sig threshold\nSet Taproot script\nBitcoin library errors\nCompliance check errors\nContains the error value\nMain error type for BiSCOL operations\nGeneric errors\nMulti-signature errors\nContains the success value\nResult type alias for BiSCOL operations\nScript execution errors\nSecp256k1 errors\nSmart contract errors\nTaproot operation errors\nZero-knowledge proof errors\nReturns the argument unchanged.\nCreate a new generic error\nCalls <code>U::from(self)</code>.\nCreate a new script execution error\nCreate a new smart contract error\nMulti-signature configuration\nBuilder for multi-signature setups\nThreshold configuration\nBuild the multi-sig configuration\nCreate a new multi-sig builder\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContext for script execution with state management\nResult of script execution\nBitcoin script representation\nBitcoin script builder for creating and validating scripts\nBuild a Bitcoin script\nExecute script in context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a script from hex string\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if execution was successful\nCreate a new script builder\nCreate a new execution context\nBuilder for Taproot scripts\nTaproot script operations\nBuild Taproot script\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Taproot script\nCreate a new Taproot builder\nZero-knowledge proof implementation\nReturns the argument unchanged.\nGenerate proof\nCalls <code>U::from(self)</code>.\nCreate a new ZK proof\nVerify proof")